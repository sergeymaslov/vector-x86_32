[sources.syslog]
title = "Syslog"
noun = "Syslog"
beta = false
common = true
delivery_guarantee = "best_effort"
<%= render("_partials/descriptions/_syslog.toml") %>
features = [
  "Accept log data over the Syslog protocol via TCP, UDP, or Unix sockets.",
  "Automatically parse Syslog 3164 and 5424 formats.",
]
function_category = "receive"
output_types = ["log"]
requirements.network_port = "514"
strategies = ["service"]
through_description = "the [Syslog protocol][urls.syslog_5424]"

<%= render("_partials/fields/_component_options.toml", type: "source", name: "syslog") %>

[sources.syslog.options.address]
type = "string"
common = true
examples = ["0.0.0.0:514", "systemd", "systemd#2"]
relevant_when = {mode = ["tcp", "udp"]}
required = true
description = """\
The TCP or UDP address to listen for connections on, or "systemd#N" to use \
the Nth socket passed by systemd socket activation.\
"""

[sources.syslog.options.host_key]
type = "string"
category = "Context"
default = "host"
description = """\
The key name added to each event representing the current host. This can also \
be globally set via the \
[global `host_key` option][docs.reference.global-options#host_key].\
"""

[sources.syslog.options.max_length]
type = "uint"
default = 102400
unit = "bytes"
description = """\
The maximum bytes size of incoming messages before they are discarded.\
"""

[sources.syslog.options.mode]
type = "string"
common = true
required = true
description = "The input mode."

[sources.syslog.options.mode.enum]
tcp = "Read incoming Syslog data over the TCP protocol."
udp = "Read incoming Syslog data over the UDP protocol."
unix = "Read uncoming Syslog data through a Unix socker."

[sources.syslog.options.path]
type = "string"
common = true
examples = ["/path/to/socket"]
relevant_when = {mode = "unix"}
required = true
description = """\
The unix socket path. *This should be absolute path.*
"""

<%= render("_partials/fields/_tls_acceptor_options.toml", namespace: "sources.syslog.options", relevant: "") %>

[sources.syslog.fields.log.fields.appname]
type = "string"
examples = ["app-name"]
description = """\
The appname extracted from the Syslog formatted line. If a appname is not \
found, then the key will not be added.\
"""

[sources.syslog.fields.log.fields.host]
type = "string"
examples = ["my.host.com"]
required = true
description = """\
The hostname extracted from the Syslog line. If a hostname is not found, then \
Vector will use the upstream hostname. In the case where `mode` = `"unix"` the \
socket path will be used. This key can be renamed via the `host_key` option.\
"""

[sources.syslog.fields.log.fields.hostname]
type = "string"
examples = ["my.host.com"]
required = true
description = """\
The hostname extracted from the Syslog line. (`host` is also this value if it exists in the log.)
"""

[sources.syslog.fields.log.fields.source_ip]
type = "string"
examples = ["127.0.0.1"]
required = true
description = """\
The upstream hostname. In the case where `mode` = `"unix"` the socket path will \
be used. (`host` is also this value if `hostname` does not exist in the log.)
"""

[sources.syslog.fields.log.fields.facility]
type = "string"
examples = ["1"]
description = """\
The facility extracted from the Syslog line. If a facility is not found, then \
the key will not be added.\
"""

[sources.syslog.fields.log.fields.message]
type = "string"
examples = ["<13>Feb 13 20:07:26 74794bfb6795 root[8539]: i am foobar"]
required = true
description = """\
The raw message, unaltered.
"""

[sources.syslog.fields.log.fields.msgid]
type = "string"
examples = ["ID47"]
description = """\
The msgid extracted from the Syslog line. If a msgid is not found, then the \
key will not be added.\
"""

[sources.syslog.fields.log.fields.procid]
type = "string"
examples = ["8710"]
description = """\
The procid extracted from the Syslog line. If a procid is not found, then the \
key will not be added.\
"""

[sources.syslog.fields.log.fields.severity]
type = "string"
examples = ["notice"]
description = """\
The severity extracted from the Syslog line. If a severity is not found, then \
the key will not be added.\
"""

[sources.syslog.fields.log.fields.timestamp]
type = "timestamp"
examples = ["2019-11-01T21:15:47.443232Z"]
required = true
description = """\
The timestamp extracted from the incoming line. If a timestamp is not found, \
then Vector will use the current time.\
"""

[sources.syslog.fields.log.fields.version]
type = "int"
examples = [1]
description = """\
The version extracted from the Syslog line. If a version is not found, then \
the key will not be added.\
"""

[sources.syslog.fields.log.fields."`[field-name]`"]
type = "*"
examples = [
  {custom_field1 = "custom value 1"},
]
description = """\
In addition to the defined fields, any Syslog 5424 structured fields are \
parsed and inserted as root level fields.
"""

[[sources.syslog.examples]]
label = "RFC5424"
body = """\
Given the following [Syslog 5424][urls.syslog_5424] log line:

```text
<13>1 2020-03-13T20:45:38.119Z dynamicwireless.name non 2426 ID931 [exampleSDID@32473 iut=\"3\" eventSource= \"Application\" eventID=\"1011\"] Try to override the THX port, maybe it will reboot the neural interface!
```

A `log` event will be produced with the following structure:

```javascript
{
  "severity": "notice",
  "facility": "user",
  "timestamp": "2020-03-13T20:45:38.119Z",
  "host": "dynamicwireless.name", // controlled via the `host_key` option,
  "source_ip": "127.0.0.1",
  "hostname": "dynamicwireless.name"
  "appname": "non",
  "procid": "2426",
  "msgid": "ID931",
  "iut": "3",
  "eventSource": "Application",
  "eventID": "1011",
  "message": "Try to override the THX port, maybe it will reboot the neural interface!"
}
```
"""

