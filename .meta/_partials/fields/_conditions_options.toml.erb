[<%= namespace %>.type]
type = "string"
common = true
default = "check_fields"
description = """\
The type of the condition to execute.\
"""

[<%= namespace %>.type.enum]
check_fields = "Allows you to check individual fields against a list of conditions."
is_log = "Returns true if the event is a log."
is_metric = "Returns true if the event is a metric."


[<%= namespace %>."`[field-name]`.not_`[condition]`"]
type = "any"
examples = [
  { "message.not_contains" = "some phrase to ignore" },
  { "unit.not_starts_with" = "sys-" },
  { "unit.not_ends_with" = ".device" }
]
common = false
relevant_when = {type = "check_fields"}
description = """\
Check if the given `[condition]` does not match.\
"""

[<%= namespace %>."`[field-name]`.eq"]
type = "string"
examples = [
  { "message.eq" = "this is the content to match against" },
  { "message.eq" = ["match this", "or this" ]}
]
common = true
relevant_when = {type = "check_fields"}
description = """\
Check whether a fields contents exactly matches the value specified. \
This may be a single string or a list of strings, in which case this evaluates to true if any of the list matches.\
"""

[<%= namespace %>."`[field-name]`.neq"]
type = "string"
examples = [
  { "method.neq" = "POST" },
  { "method.neq" = ["POST", "GET"] }
]
common = false
relevant_when = {type = "check_fields"}
description = """\
Check whether a fields contents does not match the value specified. \
This may be a single string or a list of strings, in which case this evaluates to false if any of the list matches.\
"""

[<%= namespace %>."`[field-name]`.exists"]
type = "bool"
examples = [
  { "host.exists" = true }
]
common = false
relevant_when = {type = "check_fields"}
description = """\
Check whether a field exists or does not exist, depending on the provided value \
being `true` or `false` respectively.\
"""

[<%= namespace %>."`[field_name]`.contains"]
type = "string"
examples = [
  { "message.contains" = "foo" },
  { "message.contains" = ["foo","bar"] }
]
common = true
relevant_when = {type = "check_fields"}
description = """\
Checks whether a string field contains a string argument. \
This may be a single string or a list of strings, in which case this evaluates to true if any of the list matches.\
"""

[<%= namespace %>."`[field_name]`.ends_with"]
type = "string"
examples = [
  { "environment.ends_with" = "-staging" },
  { "environment.ends_with" = ["-staging", "-running"] }
]
common = true
relevant_when = {type = "check_fields"}
description = """\
Checks whether a string field ends with a string argument. \
This may be a single string or a list of strings, in which case this evaluates to true if any of the list matches.\
"""

[<%= namespace %>."`[field_name]`.starts_with"]
type = "string"
examples = [
  { "environment.starts_with" = "staging-" },
  { "environment.starts_with" = ["staging-", "running-"] }
]
common = true
relevant_when = {type = "check_fields"}
description = """\
Checks whether a string field starts with a string argument. \
This may be a single string or a list of strings, in which case this evaluates to true if any of the list matches.\
"""

[<%= namespace %>."`[field_name]`.regex"]
type = "string"
examples = [
  { "message.regex" = " (any|of|these|five|words) " }
]
common = true
relevant_when = {type = "check_fields"}
description = """\
Checks whether a string field matches a [regular expression][urls.regex]. \
Vector uses the [documented Rust Regex syntax][urls.rust_regex_syntax]. \
Note that this condition is considerably more expensive than \
a regular string match (such as `starts_with` or `contains`) \
so the use of those conditions are preferred where possible.\
"""

[<%= namespace %>."`[field_name]`.ip_cidr_contains"]
type = "string"
examples = [
  { "message.ip_cidr_contains" = "10.0.0.0/8" },
  { "message.ip_cidr_contains" = ["2000::/10", "192.168.0.0/16"] }
]
common = false
relevant_when = {type = "check_fields"}
description = """\
Checks whether an IP field is contained within a given [IP CIDR][urls.cidr] (works with IPv4 and IPv6). \
This may be a single string or a list of strings, in which case this evaluates to true if the IP field is contained within any of the CIDRs in the list.\
"""
