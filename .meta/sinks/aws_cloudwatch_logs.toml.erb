[sinks.aws_cloudwatch_logs]
title = "AWS Cloudwatch Logs"
beta = false
common = true
delivery_guarantee = "at_least_once"
<%= render("_partials/descriptions/_aws_cloudwatch.toml") %>
egress_method = "batching"
features = [
  "Send logs to AWS Cloudwatch.",
  "Dynamically partition logs across CloudWatch groups and streams.",
  "Batch data to maximize throughput.",
  "Automatically retry failed requests, with backoff.",
  "Buffer your data in-memory or on-disk for performance and durability."
]
function_category = "transmit"
healthcheck = true
input_types = ["log"]
noun = "AWS Cloudwatch Logs"
requirements = {}
service_limits_short_link = "aws_cloudwatch_logs_service_limits"
service_providers = ["AWS"]
write_to_description = "[Amazon Web Service's CloudWatch Logs service][urls.aws_cloudwatch_logs] via the [`PutLogEvents` API endpoint](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutLogEvents.html)"


<%= render("_partials/fields/_aws_env_vars.toml", namespace: "sinks.aws_cloudwatch_logs.env_vars") %>

<%= render("_partials/fields/_aws_options.toml", namespace: "sinks.aws_cloudwatch_logs.options") %>

<%= render("_partials/fields/_component_options.toml", type: "sink", name: "aws_cloudwatch_logs") %>

<%= render("_partials/fields/_batch_options.toml", namespace: "sinks.aws_cloudwatch_logs.options", common: false, max_bytes: 1048576, max_events: 10000, timeout_secs: 1) %>

<%= render(
  "_partials/fields/_buffer_options.toml",
  namespace: "sinks.aws_cloudwatch_logs.options",
  common: false
) %>

<%= render(
  "_partials/fields/_request_options.toml",
  namespace: "sinks.aws_cloudwatch_logs.options",
  common: false,
  in_flight_limit: 5,
  rate_limit_duration_secs: 1,
  rate_limit_num: 5,
  retry_initial_backoff_secs: 1,
  retry_max_duration_secs: 10,
  timeout_secs: 30
) %>

<%= render("_partials/fields/_encoding_options.toml",
  namespace: "sinks.aws_cloudwatch_logs.options",
  encodings: ["json", "text"]
) %>

<%= render("_partials/fields/_compression_options.toml",
  namespace: "sinks.aws_cloudwatch_logs.options",
  options: {
    "default" => "none"
  }
) %>

[sinks.aws_cloudwatch_logs.options.group_name]
type = "string"
common = true
examples = [
  "group-name",
  "{{ file }}",
]
required = true
partition_key = true
templateable = true
description = "The [group name][urls.aws_cloudwatch_logs_group_name] of the target CloudWatch Logs stream."

[sinks.aws_cloudwatch_logs.options.stream_name]
type = "string"
common = true
examples = [
  "{{ host }}",
  "%Y-%m-%d",
  "stream-name"
]
required = true
partition_key = true
templateable = true
description = "The [stream name][urls.aws_cloudwatch_logs_stream_name] of the target CloudWatch Logs stream."

[sinks.aws_cloudwatch_logs.options.create_missing_group]
type = "bool"
common = true
default = true
description = """\
Dynamically create a [log group][urls.aws_cloudwatch_logs_group_name] if it does not already exist. This will ignore \
`create_missing_stream` directly after creating the group and will create the first stream.\
"""

[sinks.aws_cloudwatch_logs.options.create_missing_stream]
type = "bool"
common = true
default = true
description = "Dynamically create a [log stream][urls.aws_cloudwatch_logs_stream_name] if it does not already exist."

[[sinks.aws_cloudwatch_logs.examples]]
label = "Generic"
body = """\
```http
POST / HTTP/1.1
Host: logs.<region>.<domain>
X-Amz-Date: <date>
Accept: application/json
Content-Type: application/x-amz-json-1.1
Content-Length: <byte_size>
Connection: Keep-Alive
X-Amz-Target: Logs_20140328.PutLogEvents

{
  "logGroupName": "<group_name>",
  "logStreamName": "<stream_name>",
  "logEvents": [
    {
      "timestamp": <log_timestamp>,
      "message": "<json_encoded_log>"
    },
    {
      "timestamp": <log_timestamp>,
      "message": "<json_encoded_log>"
    },
    {
      "timestamp": <log_timestamp>,
      "message": "<json_encoded_log>"
    }
  ]
}
```\
"""
