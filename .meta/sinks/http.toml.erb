[sinks.http]
title = "HTTP"
noun = "an HTTP endpoint"
beta = false
common = true
delivery_guarantee = "at_least_once"
egress_method = "batching"
features = [
  "Send logs over the HTTP protocol.",
  "Batch and compress data to maximize throughput.",
  "Optionally set custom headers.",
  "Automatically retry failed requests, with backoff.",
  "Buffer your data in-memory or on-disk for performance and durability."
]
function_category = "transmit"
healthcheck = true
input_types = ["log"]
requirements = {}
write_to_description = "a generic [HTTP][urls.http] endpoint"

<%= render("_partials/fields/_component_options.toml", type: "sink", name: "http") %>

<%= render("_partials/fields/_batch_options.toml", namespace: "sinks.http.options", common: true, max_bytes: 1049000, max_events: nil, timeout_secs: 1) %>

<%= render(
  "_partials/fields/_buffer_options.toml",
  namespace: "sinks.http.options",
  common: true
) %>

<%= render(
  "_partials/fields/_request_options.toml",
  namespace: "sinks.http.options",
  common: true,
  in_flight_limit: 10,
  rate_limit_duration_secs: 1,
  rate_limit_num: 1000,
  retry_initial_backoff_secs: 1,
  retry_max_duration_secs: 10,
  timeout_secs: 30
) %>

[sinks.http.options.auth]
type = "table"
common = false
description = "Options for the authentication strategy."

[sinks.http.options.auth.children.strategy]
type = "string"
required = true
sort = 1
description = "The authentication strategy to use."

[sinks.http.options.auth.children.strategy.enum]
basic = "The [basic authentication strategy][urls.basic_auth]."
bearer = "The bearer token authentication strategy."

[sinks.http.options.auth.children.password]
type = "string"
examples = ["${HTTP_PASSWORD}", "password"]
required = true
relevant_when = {strategy = "basic"}
description = "The basic authentication password."

[sinks.http.options.auth.children.user]
type = "string"
examples = ["${HTTP_USERNAME}", "username"]
required = true
relevant_when = {strategy = "basic"}
description = "The basic authentication user name."

[sinks.http.options.auth.children.token]
type = "string"
examples = ["${API_TOKEN}", "xyz123"]
required = true
relevant_when = {strategy = "bearer"}
description = "The token to use for bearer authentication"

<%= render("_partials/fields/_compression_options.toml",
  namespace: "sinks.http.options"
) %>

<%= render("_partials/fields/_encoding_options.toml",
  namespace: "sinks.http.options",
  encodings: ["json", "ndjson", "text"]
) %>

[sinks.http.options.headers]
type = "table"
description = "Options for custom headers."

[sinks.http.options.headers.children."`[header-key]`"]
type = "string"
examples = [
  {"Authorization" = "${HTTP_TOKEN}"},
  {"X-Powered-By" = "Vector"},
]
required = true
description = "A custom header to be added to each outgoing HTTP request."

[sinks.http.options.healthcheck_uri]
type = "string"
examples = ["https://10.22.212.22:9000/_health"]
description = "A URI that Vector can request in order to determine the service health."

<%= render(
  "_partials/fields/_tls_connector_options.toml",
  namespace: "sinks.http.options",
  can_enable: false,
  can_verify_certificate: true,
  can_verify_hostname: true
) %>

[sinks.http.options.uri]
type = "string"
common = true
examples = ["https://10.22.212.22:9000/endpoint"]
required = true
description = "The full URI to make HTTP requests to. This should include the protocol and host, but can also include the port, path, and any other valid part of a URI."

[[sinks.http.examples]]
label = "JSON"
body = """\
```http
POST <uri> HTTP/1.1
Host: <uri.host>
Content-Type: application/x-ndjson
Content-Length: <byte_size>

[
  <json_encoded_log>,
  <json_encoded_log>,
  <json_encoded_log>,
]
```\
"""

[[sinks.http.examples]]
label = "NDJSON"
body = """\
```http
POST <uri> HTTP/1.1
Host: <uri.host>
Content-Type: application/x-ndjson
Content-Length: <byte_size>

<json_encoded_log>
<json_encoded_log>
<json_encoded_log>
```\
"""

[[sinks.http.examples]]
label = "Text"
body = """\
```http
POST <uri> HTTP/1.1
Host: <uri.host>
Content-Type: text/plain
Content-Length: <byte_size>

<log.message>
<log.message>
<log.message>
```\
"""
