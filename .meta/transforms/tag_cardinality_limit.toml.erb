[transforms.tag_cardinality_limit]
title = "Tag Cardinality Limit"
allow_you_to_description = """
limit the cardinality of metric tags to prevent downstream disruption of \
metrics services\
"""
beta = true
common = true
function_category = "filter"
input_types = ["metric"]
output_types = ["metric"]
requirements = {}

<%= render("_partials/fields/_component_options.toml", type: "transform", name: "tag_cardinality_limit") %>

[transforms.tag_cardinality_limit.options.value_limit]
type = "uint"
common = true
default = 500
description = "How many distinct values to accept for any given key."

[transforms.tag_cardinality_limit.options.limit_exceeded_action]
type = "string"
common = true
default = "drop_tag"
description = """\
Controls what should happen when a metric comes in with a tag that would \
exceed the configured limit on cardinality.\
"""

[transforms.tag_cardinality_limit.options.limit_exceeded_action.enum]
drop_tag = "Remove tags that would exceed the configured limit from the incoming metric"
drop_event = "Drop any metric events that contain tags that would exceed the configured limit"

[transforms.tag_cardinality_limit.options.mode]
type = "string"
common = true
required = true
description = """\
Controls what approach is used internally to keep track of previously seen \
tags and deterime when a tag on an incoming metric exceeds the limit.\
"""

[transforms.tag_cardinality_limit.options.mode.enum]
exact = """\
Has higher memory requirements than `probabilistic`, but never falsely outputs \
metrics with new tags after the limit has been hit.\
"""
probabilistic = """\
Has lower memory requirements than `exact`, but may occassionally allow \
metric events to pass through the transform even when they contain new tags \
that exceed the configured limit.  The rate at which this happens can be \
controlled by changing the value of `cache_size_per_tag`.\
"""

[transforms.tag_cardinality_limit.options.cache_size_per_tag]
type = "uint"
default = 5120000
unit = "bytes"
relevant_when = {mode = "probabilistic"}
description = """\
The size of the cache in bytes to use to detect duplicate tags. The bigger the \
cache the less likely it is to have a 'false positive' or a case where we allow \
a new value for tag even after we have reached the configured limits.\
"""

[[transforms.tag_cardinality_limit.examples]]
label = "General"
body = """\
This example will demonstrate how metric tags are dropped if they exceed the
configured `value_limit`.

For example, given this configuration:

```toml title="vector.toml"
[transforms.cardinality_protection]
  type = "tag_cardinality_limit"
  inputs = [...]

  fields.value_limit = 1
  fields.limit_exceeded_action = "drop_tag"
```

Vector will drop metric tags that exceed a cardinality of 1. Note, this limit is
unrealistically low and used only for demontration purposes.

If we were to receive the first metric event:

```js
{
  "name": "login.count",
  "timestamp": "2019-11-01T21:15:47+00:00",
  "kind": "absolute",
  "tags": {
    "host": "my.host.com",
    "request_id": "f9ed4675f1c53513c61a3b3b4e25b4c0"
  },
  "counter": {
    "value": 10
  }
}
```

It would pass through like normal; no tags would be removed. But if we were to
recieve a second metric event:

```js
{
  "name": "login.count",
  "timestamp": "2019-11-01T21:15:48+00:00",
  "kind": "absolute",
  "tags": {
    "host": "my.host.com",
    "request_id": "30f14c6c1fc85cba12bfd093aa8f90e3"
  },
  "counter": {
    "value": 4
  }
}
```

The `request_id` tag would be removed:

```js
{
  "name": "login.count",
  "timestamp": "2019-11-01T21:15:48+00:00",
  "kind": "absolute",
  "tags": {
    "host": "my.host.com"
  },
  "counter": {
    "value": 4
  }
}
```

This is because the cardinality is 2 for this metric tag, exceeding the
configured limit of 1. Note that the `host` tag was _not_ removed, because
it still has a cardinality of 1.

If you'd like to drop the entire event, just set `limit_exceeded_action` to
`"drop_event"`.
"""
