[transforms.logfmt_parser]
title = "Logfmt Parser"
allow_you_to_description = """\
parse a log field's value in the [logfmt][urls.logfmt] format\
"""
beta = true
common = true
function_category = "parse"
input_types = ["log"]
output_types = ["log"]
requirements = {}

<%= render("_partials/fields/_component_options.toml", type: "transform", name: "logfmt_parser") %>

[transforms.logfmt_parser.options.field]
type = "string"
common = true
default = "message"
examples = ["message", "parent.child", "array[0]"]
field_path_notation = true
description = "The log field to parse."

[transforms.logfmt_parser.options.drop_field]
type = "bool"
common = true
default = true
description = "If the specified `field` should be dropped (removed) after parsing."

<%= render("_partials/fields/_types_options.toml", namespace: "transforms.logfmt_parser.options", common: true) %>

[[transforms.logfmt_parser.examples]]
label = "Heroku Router Log"
body = """\
Given the following Heroku router log line:

```json title="log event"
{
  "message": "at=info method=GET path=/ host=myapp.herokuapp.com request_id=8601b555-6a83-4c12-8269-97c8e32cdb22 fwd="204.204.204.204" dyno=web.1 connect=1ms service=18ms status=200 bytes=13 tls_version=tls1.1 protocol=http"
}
```

And the following configuration:

```toml title="vector.toml"
[transforms.<transform-id>]
type = "logfmt"
field = "message"
drop_field = true

types.bytes = "int"
types.status = "int"
```

A [`log` event][docs.data-model.log] will be output with the following structure:

```javascript title="log event"
{
  // ... existing fields
  "at": "info",
  "method": "GET",
  "path": "/",
  "host": "myapp.herokuapp.com",
  "request_id": "8601b555-6a83-4c12-8269-97c8e32cdb22",
  "fwd": "204.204.204.204",
  "dyno": "web.1",
  "connect": "1ms",
  "service": "18ms",
  "status": 200,
  "bytes": 13,
  "tls_version": "tls1.1",
  "protocol": "http"
}
```

A couple of things to note:

1. The `bytes` and `status` fields were coerced into `int`s via the `types` options.
2. The `message` field was dropped due to setting `drop_field` to `true`.\
"""

[[transforms.logfmt_parser.examples]]
label = "Loosely Structured"
body = """\
The `logfmt_parser` will also parse loosely structured key/value pairs. For
example, given the following `log` event:

```json title="log event"
{
  "message": "info | Sent 200 in 54.2ms duration=54.2ms status=200"
}
```

And the following configuration:

```toml title="vector.toml"
[transforms.<transform-id>]
type = "logfmt"
field = "message"
drop_field = false # keep the field since it contains other data

types.status = "int"
```

A [`log` event][docs.data-model.log] will be output with the following structure:

```javascript title="log event"
{
  // ... existing fields
  "message": "info | Sent 200 in 54.2ms duration=54.2ms status=200",
  "duration": "54.2ms",
  "status": 200
}
```

A couple of things to note:

1. The `status` field was coerced into an `int` via the `types` option.
2. The `message` field was _kept_ due to setting `drop_field` to `false`.\
"""
