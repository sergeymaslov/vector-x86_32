[transforms.json_parser]
title = "JSON Parser"
allow_you_to_description = "parse a log field value as JSON"
beta = false
common = true
function_category = "parse"
input_types = ["log"]
output_types = ["log"]
requirements = {}

<%= render("_partials/fields/_component_options.toml", type: "transform", name: "json_parser") %>

[transforms.json_parser.options.drop_field]
type = "bool"
common = true
default = true
description = """\
If the specified `field` should be dropped (removed) after parsing. If \
parsing fails, the field will not be removed, irrespective of this setting.\
"""

[transforms.json_parser.options.drop_invalid]
type = "bool"
common = true
examples = [true]
required = true
description = """\
If `true` events with invalid JSON will be dropped, otherwise the \
event will be kept and passed through.\
"""

[transforms.json_parser.options.field]
type = "string"
common = true
default = "message"
examples = ["message", "parent.child", "array[0]"]
field_path_notation = true
description = """\
The log field to decode as JSON. Must be a `string` value type.\
"""

[transforms.json_parser.options.overwrite_target]
type = "bool"
default = false
description = """\
If `target_field` is set and the log contains a field of the same name \
as the target, it will only be overwritten if this is set to `true`.\
"""

[transforms.json_parser.options.target_field]
type = "string"
examples = ["root_field", "parent.child"]
field_path_notation = true
description = """\
If this setting is present, the parsed JSON will be inserted into the \
log as a sub-object with this name. \
If a field with the same name already exists, the parser will fail and \
produce an error.\
"""

[[transforms.json_parser.examples]]
label = "Simple"
body = """\
Given the following log event:

```javascript
{
  "message": "{"key": "value"}"
}
```

You can parse the JSON with:

```toml
[transforms.json]
  inputs = ["<source_id>"]
  type   = "json_parser"
  field  = "message"
```

This would produce the following event as output:

```javascript
{
  "key": "value"
}
```

By default, Vector drops fields after parsing them via the `drop_field`
option.\
"""

[[transforms.json_parser.examples]]
label = "Wrapped"
body = """\
It is possible to chain `json_parser` transforms to effectively "unwrap"
nested JSON documents. For example, give this log event:

```javascript
{
  "message": "{"parent": "{\"child\": \"value2\"}"}"
}
```

You could unwrap the JSON with the following transforms:

```toml
[transforms.root_json]
  inputs = ["<source_id>"]
  type   = "json_parser"
  field  = "message"

[transforms.parent_json]
  inputs = ["root_json"]
  type   = "json_parser"
  field  = "parent"

[transforms.child_json]
  inputs = ["parent_json"]
  type   = "json_parser"
  field  = "child"
```

This would produce the following event as output:

```javascript
{
  "child": "value2"
}
```

By default, Vector drops fields after parsing them via the `drop_field`
option.\
"""
