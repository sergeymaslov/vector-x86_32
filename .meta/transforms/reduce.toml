[transforms.reduce]
title = "Reduce"
allow_you_to_description = """\
combine multiple events into a single event based on a set of identifiers\
"""
beta = true
common = false
function_category = "aggregate"
input_types = ["log"]
output_types = ["log"]
requirements = {}

<%= render("_partials/fields/_component_options.toml", type: "transform", name: "reduce") %>

[transforms.reduce.options.expire_after_ms]
type = "int"
common = false
required = false
default = 30000
description = """\
A maximum period of time to wait after the last event is received before \
a combined event should be considered complete.\
"""

[transforms.reduce.options.flush_period_ms]
type = "int"
common = false
required = false
default = 1000
description = """\
Controls the frequency that Vector checks for (and flushes) expired \
events.\
"""

[transforms.reduce.options.identifier_fields]
type = "[string]"
common = true
required = false
default = []
examples = [["request_id"],["user_id","transaction_id"]]
description = """\
An ordered list of fields by which to group events. Each group is combined \
independently, allowing you to keep independent events separate. When no fields \
are specified, all events will be combined in a single group. Events missing \
a specified field will be combined in their own group.\
"""

[transforms.reduce.options.merge_strategies]
type = "table"
common = false
required = false
description = """\
A map of field names to custom merge strategies. For each field specified this \
strategy will be used for combining events rather than the default behavior.

The default behavior is as follows:

1. The first value of a string field is kept, subsequent values are discarded.
2. For timestamp fields the first is kept and a new field `[field-name]_end` is
   added with the last received timestamp value.
3. Numeric values are summed.\
"""

[transforms.reduce.options.merge_strategies.children."`[field-name]`"]
type = "string"
required = true
common = true
examples = [
  {method="discard"},
  {path="discard"},
  {duration_ms="sum"},
  {query="array"}
]
description = "The custom merge strategy to use for a field."

[transforms.reduce.options.merge_strategies.children."`[field-name]`".enum]
"array" = "Each value is appended to an array."
"concat" = "Concatenate each string value (delimited with a space)."
"discard" = "Discard all but the first value found."
"sum" = "Sum all numeric values."
"max" = "The maximum of all numeric values."
"min" = "The minimum of all numeric values."

[transforms.reduce.options.ends_when]
type = "table"
common = true
required = false
description = """\
A condition used to distinguish the final event of a transaction. If this \
condition resolves to true for an event the transaction it belongs to is \
immediately flushed.\
"""

<%= render("_partials/fields/_conditions_options.toml", namespace: "transforms.reduce.options.ends_when.children") %>

[[transforms.reduce.examples]]
label = "Default"
body = """\
Given the following configuration:

<CodeHeader fileName="vector.toml" />

```toml
[transforms.transaction_events]
  type = "reduce"
  inputs = [...]
```

And these three [`log` events][docs.data-model.log]:

<CodeHeader fileName="first log event" />

```javascript
{
  "message": "A thing is happening",
  "custom_string_field_1": "value1",
  "this_much": 1
}
```

Followed by:

<CodeHeader fileName="second log event" />

```javascript
{
  "message": "That thing is still happening",
  "custom_string_field_2": "value2",
  "this_much": 3
}
```

And, finally:

<CodeHeader fileName="third log event" />

```javascript
{
  "message": "That thing is concluded",
  "custom_string_field_3": "value3",
  "this_much": 2
}
```

A single log event will eventually be produced:

```javascript
{
  "message": "A thing is happening",
  "custom_string_field_1": "value1",
  "custom_string_field_2": "value2",
  "custom_string_field_3": "value3",
  "this_much": 6
}
```

Notice that string values have not been overridden and integer values have been \
summed.\
"""

[[transforms.reduce.examples]]
label = "With Identifier Fields"
body = """\
Given the following configuration:

<CodeHeader fileName="vector.toml" />

```toml
[transforms.transaction_events]
  type = "reduce"
  inputs = [...]

  identifier_fields = ["request_id"]

  [transforms.transaction_events.merge_strategies]
    request_action = "array"

  [transforms.transaction_events.ends_when]
    "request_concluded.exists" = true
```

And these three [`log` events][docs.data-model.log]:

<CodeHeader fileName="first log event" />

```javascript
{
  "message": "A thing is happening",
  "request_id": "1",
  "request_action": "start",
  "this_much": 1
}
```

Followed by:

<CodeHeader fileName="second log event" />

```javascript
{
  "message": "That thing is still happening",
  "request_id": "1",
  "request_action": "bounced",
  "this_much": 2
}
```

And:

<CodeHeader fileName="third log event" />

```javascript
{
  "message": "A different thing is happening",
  "request_id": "2",
  "request_action": "start",
  "this_much": 5
}
```

And, finally:

<CodeHeader fileName="fourth log event" />

```javascript
{
  "message": "That thing concluded",
  "request_id": "1",
  "request_action": "rebound",
  "request_concluded": true,
  "this_much": 3
}
```

A single log event will be produced and flushed immediately:

```javascript
{
  "message": "A thing is happening",
  "request_id": "1",
  "request_action": ["start","bounced","rebound"]
  "request_concluded": true,
  "this_much": 6
}
```

Notice that the fields from the third event are not present as it has been \
identified as a separate transaction and will be aggregated separately. Also, \
the values of the field `request_action` have been stored in an array instead of \
the default behavior.\
"""
