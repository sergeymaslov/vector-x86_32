[transforms.regex_parser]
title = "Regex Parser"
allow_you_to_description = """\
parse a log field's value with a [Regular Expression][urls.regex]\
"""
beta = false
common = true
function_category = "parse"
input_types = ["log"]
output_types = ["log"]
requirements = {}

<%= render(
  "_partials/fields/_component_options.toml",
  type: "transform",
  name: "regex_parser"
) %>

[transforms.regex_parser.options.drop_field]
type = "bool"
common = true
default = true
description = "If the specified `field` should be dropped (removed) after parsing."

[transforms.regex_parser.options.field]
type = "string"
common = true
default = "message"
examples = ["message", "parent.child"]
field_path_notation = true
description = "The log field to parse."

[transforms.regex_parser.options.overwrite_target]
type = "bool"
default = true
description = """\
If `target_field` is set and the log contains a field of the same name \
as the target, it will only be overwritten if this is set to `true`.\
"""

[transforms.regex_parser.options.patterns]
type = "string"
common = true
examples = [
"""\
['^(?P<timestamp>[\\w\\-:\\+]+) (?P<level>\\w+) (?P<message>.*)$']\
"""
]
required = true
description = """\
The Regular Expressions to apply. Do not include the leading or trailing `/` in any of the expressions.\
"""

[transforms.regex_parser.options.target_field]
type = "string"
examples = ["root_field", "parent.child"]
field_path_notation = true
description = """\
If this setting is present, the parsed fields will be inserted into the \
log as a sub-object with this name. \
If a field with the same name already exists, the parser will fail and \
produce an error.\
"""

<%= render(
  "_partials/fields/_types_options.toml",
  namespace: "transforms.regex_parser.options",
  common: true
) %>

[[transforms.regex_parser.examples]]
label = "Syslog 5424"
body = '''
Given the following log line:

```json title="log event"
{
  "message": "5.86.210.12 - zieme4647 5667 [19/06/2019:17:20:49 -0400] \"GET /embrace/supply-chains/dynamic/vertical\" 201 20574"
}
```

And the following configuration:

```toml title="vector.toml"
[transforms.<transform-id>]
  type = "regex_parser"
  field = "message"
  patterns = ['^(?P<host>[\w\.]+) - (?P<user>[\w]+) (?P<bytes_in>[\d]+) \[(?P<timestamp>.*)\] "(?P<method>[\w]+) (?P<path>.*)" (?P<status>[\d]+) (?P<bytes_out>[\d]+)$']

[transforms.<transform-id>.types]
  bytes_in = "int"
  timestamp = "timestamp|%d/%m/%Y:%H:%M:%S %z"
  status = "int"
  bytes_out = "int"
```

A [`log` event][docs.data-model.log] will be output with the following structure:

```javascript title="log event"
{
  // ... existing fields
  "bytes_in": 5667,
  "host": "5.86.210.12",
  "user_id": "zieme4647",
  "timestamp": <19/06/2019:17:20:49 -0400>,
  "message": "GET /embrace/supply-chains/dynamic/vertical",
  "status": 201,
  "bytes_out": 20574
}
```

Things to note about the output:

1. The `message` field was overwritten.
2. The `bytes_in`, `timestamp`, `status`, and `bytes_out` fields were coerced.
'''
