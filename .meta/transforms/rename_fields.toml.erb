[transforms.rename_fields]
title = "Rename Fields"
allow_you_to_description = "rename one or more log fields"
beta = false
common = false
function_category = "schema"
input_types = ["log"]
output_types = ["log"]
requirements = {}

<%= render("_partials/fields/_component_options.toml", type: "transform", name: "rename_fields") %>

[transforms.rename_fields.options.fields]
type = "table"
common = true
required = true
description = """\
A table of old-key/new-key pairs representing the keys to be moved in the \
event.\
"""

[transforms.rename_fields.options.fields.children."`[field-name]`"]
type = "*"
field_path_notation = true
required = true
examples = [
  {old_field_name = "new_field_name"},
  {parent.old_child_name = "parent.new_child_name"},
]
description = """\
Old-key/New-key pair reprsenting the key to be moved.
"""

[transforms.rename_fields.options.drop_empty]
type = "bool"
required = false
default = false
description = "If set to `true`, after renaming fields, remove any parent objects of the old field that are now empty."


[[transforms.rename_fields.examples]]
label = "Generic"
body = """\
Given the following `log` event:

```js
{
  // ...
  "old_field": "root_value",
  "old_nested": {
    "nested": "nested_value"
  }
  // ...
}
```

And a Vector configuration like:

```toml title="vector.toml"
[transforms.my_transform]
  type = "rename_fields"
  inputs = [...]

  fields.old_field = "new_field"
  fields.old_nested.nested = "new_nested.nested",
```

Will result in the following `log` event:

```js
{
  // ...
  "new_field": "root_value",
  "new_nested": {
    "nested": "nested_value"
  }
  // ...
}
```
"""
