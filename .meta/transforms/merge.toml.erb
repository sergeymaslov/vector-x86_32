[transforms.merge]
title = "Merge"
allow_you_to_description = "merge partial log events into a single event"
beta = true
common = false
function_category = "aggregate"
input_types = ["log"]
output_types = ["log"]
requirements = {}

<%= render("_partials/fields/_component_options.toml", type: "transform", name: "merge") %>

[transforms.merge.options.merge_fields]
type = "[string]"
common = true
default = ["message"]
examples = [["message"], ["message", "parent.child"]]
field_path_notation = true
description = """\
Fields to merge. The values of these fields will be merged into the \
first partial event. Fields not specified here will be ignored. \
Merging process takes the first partial event and the base, then it \
merges in the fields from each successive partial event, until a \
non-partial event arrives. Finally, the non-partial event fields are \
merged in, producing the resulting merged event.\
"""

[transforms.merge.options.partial_event_marker_field]
type = "string"
common = true
default = "_partial"
examples = ["_partial", "parent.child"]
field_path_notation = true
description = """\
The field that indicates that the event is partial. A consequent stream \
of partial events along with the first non-partial event will be merged \
together.\
"""

[transforms.merge.options.stream_discriminant_fields]
type = "[string]"
common = true
default = []
examples = [["host"], ["host", "parent.child"]]
field_path_notation = true
description = """\
An ordered list of fields to distinguish streams by. Each stream has a \
separate partial event merging state. Should be used to prevent events \
from unrelated sources from mixing together, as this affects partial \
event processing.\
"""

[[transforms.merge.examples]]
label = "Default"
body = """\
Given the following _default_ configuration:

```toml title="vector.toml"
[transforms.merge_events]
  type = "merge"
  inputs = [...]
```

And these three partial [`log` events][docs.data-model.log]:

```javascript title="first log event"
{
  "message": "First",
  "_partial": true,
  "custom_string_field": "value1",
  "custom_int_field": 1
}
```

and

```javascript title="second log event"
{
  "message": "Second",
  "_partial": true,
  "custom_string_field": "value2",
  "custom_int_field": 2
}
```

and

```javascript title="third log event"
{
  "message": "Third",
  "custom_string_field": "value3",
  "custom_int_field": 3
}
```

A single _merged_ log event will be produced:

```javascript
{
  "message": "FirstSecondThird",
  "custom_string_field": "value1",
  "custom_int_field": 1
}
```

Notice that `custom_string_field` and `custom_int_field` were not overridden. \
This is because they were not listed in the `merge_fields` option.\
"""

[[transforms.merge.examples]]
label = "With Merge Fields"
body = """\
Given the following configuration:

```toml title="vector.toml"
[transforms.merge_events]
  type = "merge"
  inputs = [...]
  merge_fields = ["message", "custom_string_field", "custom_int_field"]
```

And these three partial [`log` events][docs.data-model.log]:

```javascript title="first log event"
{
  "message": "First",
  "_partial": true,
  "custom_string_field": "value1",
  "custom_int_field": 1
}
```

and

```javascript title="second log event"
{
  "message": "Second",
  "_partial": true,
  "custom_string_field": "value2",
  "custom_int_field": 2
}
```

and

```javascript title="third log event"
{
  "message": "Third",
  "custom_string_field": "value3",
  "custom_int_field": 3
}
```

A single _merged_ log event will be produced:

```javascript
{
  "message": "FirstSecondThird",
  "custom_string_field": "value1value2value3",
  "custom_int_field": 3
}
```

Notice that `custom_string_field` is concatenated and `custom_int_field` \
overridden. This is because it was specified in the `merge_fields` option.\
"""
