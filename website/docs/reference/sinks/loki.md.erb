<%- component = metadata.sinks.loki -%>

<%= component_header(component) %>

<%- if component.requirements.any? -%>
## Requirements

<%= component_requirements(component) %>

<%- end -%>
<%- if component.warnings.any? -%>
## Warnings

<%= component_warnings(component) %>

<%- end -%>
## Configuration

<%= component_config_example(component) %>

<%= fields(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= fields(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%- if component.examples.any? -%>
## Examples

<%= component_examples(component) %>

<%- end -%>
## How It Works [[sort]]

### Decentralized Deployments

Loki currently does not support out-of-order inserts. If Vector is deployed in
a decentralized setup then there is the possibility that logs might get
rejected due to data races between Vector instances. To avoid this we suggest
either assigning each Vector instance with a unique label or deploying a
centralized Vector which will ensure no logs will get sent out-of-order.

### Event Ordering

The `loki` sink will ensure that all logs are sorted via their `timestamp`. This
is to ensure that logs will be accepted by Loki. If no timestamp is supplied
with events then the Loki sink will supply its own monotonically increasing
timestamp.

<%= component_sections(component) %>
