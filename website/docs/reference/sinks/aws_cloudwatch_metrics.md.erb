<%- component = metadata.sinks.aws_cloudwatch_metrics -%>

<%= component_header(component) %>

<%- if component.requirements.any? -%>
## Requirements

<%= component_requirements(component) %>

<%- end -%>
<%- if component.warnings.any? -%>
## Warnings

<%= component_warnings(component) %>

<%- end -%>
## Configuration

<%= component_config_example(component) %>

<%= fields(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= fields(component.env_vars_list, heading_depth: 3) %>

<%- end -%>

<%- if component.examples.any? -%>
## Examples

<%= component_examples(component) %>

<%- end -%>
## How It Works [[sort]]

### Metric Types

CloudWatch Metrics types are organized not by their semantics, but by storage properties:

* Statistic Sets
* Data Points

In Vector only the latter is used to allow lossless statistics calculations on CloudWatch side.

The following matrix outlines how Vector metric types are mapped into CloudWatch metrics types.

| Vector Metrics | CloudWatch Metrics |
|----------------|--------------------|
| Counter        | Data Point         |
| Gauge          | Data Point         |
| Gauge Delta [1]| Data Point         |
| Histogram      | Data Point         |
| Set            | N/A                |

1. Gauge values are persisted between flushes. On Vector start up each gauge is assumed to have
zero (0.0) value, that can be updated explicitly by the consequent absolute (not delta) gauge
observation, or by delta increments/decrements. Delta gauges are considered an advanced feature
useful itn distributed setting, however it should be used with care.

<%= component_sections(component) %>


