<%- component = metadata.sinks.gcp_cloud_storage -%>

<%= component_header(component) %>

<%- if component.requirements.any? -%>
## Requirements

<%= component_requirements(component) %>

<%- end -%>
<%- if component.warnings.any? -%>
## Warnings

<%= component_warnings(component) %>

<%- end -%>
## Configuration

<%= component_config_example(component) %>

<%= fields(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= fields(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%- if component.examples.any? -%>
## Examples

<%= component_examples(component) %>

<%- end -%>
## How It Works [[sort]]

<%= component_sections(component) %>

### Object access control list (ACL)

GCP Cloud Storage supports access control lists (ACL) for buckets and
objects. In the context of Vector, only object ACLs are relevant (Vector
does not create or modify buckets). You can set the object level ACL by
using the `acl` option, which allows you to set one of the [predefined
ACLs][urls.gcs_predefined_acl] on each created object.


### Object naming

By default, Vector will name your GCS objects in the following format:

<Tabs
  block={true}
  defaultValue="without_compression"
  values={[
    { label: 'Without Compression', value: 'without_compression', },
    { label: 'With Compression', value: 'with_compression', },
  ]
}>

<TabItem value="without_compression">

```text
<key_prefix><timestamp>-<uuidv4>.log
```

For example:

```text
date=2019-06-18/1560886634-fddd7a0e-fad9-4f7e-9bce-00ae5debc563.log
```

</TabItem>
<TabItem value="with_compression">

```text
<key_prefix><timestamp>-<uuidv4>.log.gz
```

For example:

```text
date=2019-06-18/1560886634-fddd7a0e-fad9-4f7e-9bce-00ae5debc563.log.gz
```

</TabItem>
</Tabs>

Vector appends a [UUIDV4][urls.uuidv4] token to ensure there are no name
conflicts in the unlikely event 2 Vector instances are writing data at the same
time.

You can control the resulting name via the `key_prefix`, `filename_time_format`,
and `filename_append_uuid` options.

### Storage class

GCS offers [storage classes][urls.gcs_storage_classes]. You can apply
defaults, and rules, at the bucket level or set the storage class at the
object level. In the context of Vector only the object level is relevant
(Vector does not create or modify buckets). You can set the storage
class via the `storage_class` option.

### Tags & metadata

Vector supports adding [custom metadata][urls.gcs_custom_metadata] to
created objects. These metadata items are a way of associating extra
data items with the object that are not part of the uploaded data.
