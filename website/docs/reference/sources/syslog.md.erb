<%- component = metadata.sources.syslog -%>

<%= component_header(component) %>

<%- if component.requirements.any? -%>
## Requirements

<%= component_requirements(component) %>

<%- end -%>
<%- if component.warnings.any? -%>
## Warnings

<%= component_warnings(component) %>

<%- end -%>
## Configuration

<%= component_config_example(component) %>

<%= fields(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= fields(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%= component_fields(component, heading_depth: 2) -%>
<%- if component.examples.any? -%>
## Examples

<%= component_examples(component) %>

<%- end -%>
## How It Works [[sort]]

<%= component_sections(component) %>

### Line Delimiters

Each line is read until a new line delimiter (the `0xA` byte) is found.

### Parsing

Vector makes a _best effort_ to parse the various Syslog formats out in the
wild. This includes [RFC 6587][urls.syslog_6587], [RFC 5424][urls.syslog_5424],
[RFC 3164][urls.syslog_3164], and other common variations (such as the Nginx
Syslog style). It's unfortunate that the Syslog specification is not more
accurately followed, but we hope Vector insulates you from these diviations.

If parsing fails, Vector will include the entire Syslog line in the `message`
key. If you find this happening often, we recommend using the
[`socket` source][docs.sources.socket] combined with the
[`regex_parser` transform][docs.transforms.regex_parser] to implement your own
ingestion and parsing scheme. Or, [open an issue][urls.new_feature_request]
requesting support for your specific format.
