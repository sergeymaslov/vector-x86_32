<%- component = metadata.sources.journald -%>

<%= component_header(component) %>

<%- if component.requirements.any? -%>
## Requirements

<%= component_requirements(component) %>

<%- end -%>
<%- if component.warnings.any? -%>
## Warnings

<%= component_warnings(component) %>

<%- end -%>
## Configuration

<%= component_config_example(component) %>

<%= fields(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= fields(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%= component_fields(component, heading_depth: 2) -%>
<%- if component.examples.any? -%>
## Examples

<%= component_examples(component) %>

<%- end -%>
## How It Works [[sort]]

### Checkpointing

Vector checkpoints the journal position after every batch read. The size of
the batch is controlled via the `batch_size` option. Checkpointing ensures that
Vector resumes where it left off if restarted, preventing data from being read
twice. The checkpoint positions are stored in the data directory which is
specified via the [global `data_dir` option][docs.global-options#data_dir]
but can be overridden via the `data_dir` option in the `journald` source
directly.

### Communication strategy

To ensure the `journald` source works across all platforms, Vector interacts
with the Systemd journal via the `journalctl` command. This is accomplished by
spawning a [subprocess][urls.rust_subprocess] that Vector diligently interacts
with. If the `journalctl` command is not in the environment path you can
specify the exact location via the `journalctl_path` option. For more
information on this communication strategy please see
[issue #1473][urls.issue_1473].

### User permissions

If you run Vector from a non-root user, you need to add that user to the
`systemd-journal` group.

For example, if the user is named `vector`, it can be done by running

```sh
usermod -aG systemd-journal vector
```

### Non-ASCII messages

When `journald` has stored a message that is not strict ASCII,
`journalctl` will output it in an alternate format to prevent data
loss. Vector handles this alternate format by translating such messages
into UTF-8 in "lossy" mode, where characters that are not valid UTF-8
are replaced with the Unicode replacement character, `ï¿½`.

<%= component_sections(component) %>
