<%- component = metadata.sources.file -%>

<%= component_header(component) %>

<%- if component.requirements.any? -%>
## Requirements

<%= component_requirements(component) %>

<%- end -%>
<%- if component.warnings.any? -%>
## Warnings

<%= component_warnings(component) %>

<%- end -%>
## Configuration

<%= component_config_example(component) %>

<%= fields(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= fields(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%= component_fields(component, heading_depth: 2) -%>
<%- if component.examples.any? -%>
## Examples

<%= component_examples(component) %>

<%- end -%>
## How It Works [[sort]]

<%= component_sections(component) %>

### Auto Discovery

Vector will continually look for new files matching any of your include
patterns. The frequency is controlled via the `glob_minimum_cooldown` option.
If a new file is added that matches any of the supplied patterns, Vector will
begin tailing it. Vector maintains a unique list of files and will not tail a
file more than once, even if it matches multiple patterns. You can read more
about how we identify files in the [Identification](#file-identification)
section.

### Checkpointing

Vector checkpoints the current read position in the file after each successful
read. This ensures that Vector resumes where it left off if restarted,
preventing data from being read twice. The checkpoint positions are stored in
the data directory which is specified via the
[global `data_dir` option][docs.global-options#data_dir] but can be
overridden via the `data_dir` option in the `file` source directly.

### Compressed Files

Vector will transparently detect files which have been compressed using `gzip`
and decompress them for reading. This detection process looks for the unique
sequence of bytes in the `gzip` header and does not rely on the compressed files
adhering to any kind of naming convention.

One caveat with reading compressed files is that Vector is not able to
efficiently seek into them. Rather than implement a potentially-expensive full
scan as a seek mechanism, Vector currently will not attempt to make further
reads from a file for which it has already stored a checkpoint in a previous
run. For this reason, users should take care to allow Vector to fully process
any compressed files before shutting the process down or moving the files to
another location on disk.

### File Rotation

Vector supports tailing across a number of file rotation strategies. The default
behavior of `logrotate` is simply to move the old log file and create a new one.
This requires no special configuration of Vector, as it will maintain its open
file handle to the rotated log until it has finished reading and it will find
the newly created file normally.

A popular alternative strategy is `copytruncate`, in which `logrotate` will copy
the old log file to a new location before truncating the original. Vector will
also handle this well out of the box, but there are a couple configuration options
that will help reduce the very small chance of missed data in some edge cases.
We recommend a combination of `delaycompress` (if applicable) on the logrotate
side and including the first rotated file in Vector's `include` option. This
allows Vector to find the file after rotation, read it uncompressed to identify
it, and then ensure it has all of the data, including any written in a gap
between Vector's last read and the actual rotation event.

### File Deletion

When a watched file is deleted, Vector will maintain its open file handle and
continue reading until it reaches `EOF`. When a file is no longer findable in
the `includes` glob and the reader has reached EOF, that file's reader is
discarded.

### Fingerprinting

By default, Vector identifies files by creating a [cyclic redundancy check
(CRC)][urls.crc] on the first 256 bytes of the file. This serves as a
fingerprint to uniquely identify the file. The amount of bytes read can be
controlled via the `fingerprint_bytes` and `ignored_header_bytes` options.

This strategy avoids the common pitfalls of using device and inode names since
inode names can be reused across files. This enables Vector to [properly tail
files across various rotation strategies][pages.index#correctness].

### Globbing

[Globbing][urls.globbing] is supported in all provided file paths, files will
be [autodiscovered](#auto-discovery) continually at a rate defined by the
`glob_minimum_cooldown` option.

### Line Delimiters

Each line is read until a new line delimiter (the `0xA` byte) or `EOF` is found.

### Multi-Line Messages

Sometimes a single log event will appear as multiple log lines. To handle this,
Vector provides a set of `multiline` options. These options were carefully
thought through and will allow you to solve the simplest and most complex
cases. Let's look at a few examples:

#### Example 1: Ruby Exceptions

Ruby exceptions, when logged, consist of multiple lines:

```text
foobar.rb:6:in `/': divided by 0 (ZeroDivisionError)
  from foobar.rb:6:in `bar'
  from foobar.rb:2:in `foo'
  from foobar.rb:9:in `<main>'
```

To consume these lines as a single event, use the following Vector configuration:

```toml
[sources.my_file_source]
  type = "file"
  # ...

  [sources.my_file_source.multiline]
    start_pattern = "^[^\\s]"
    mode = "continue_through"
    condition_pattern = "^[\\s]+from"
    timeout_ms = 1000
```

* `start_pattern`, set to `^[^\\s]`, tells Vector that new multi-line events
  should _not_ start  with white-space.
* `mode`, set to `continue_through`, tells Vector continue aggregating lines
  until the `condition_pattern` is no longer valid (excluding the invalid line).
* `condition_pattern`, set to `^[\\s]+from`, tells Vector to continue
  aggregating lines if they start with white-space followed by `from`.

#### Example 2: Line Continuations

Some programming languages use the backslash (`\`) character to signal that a
line will continue on the next line:

```text
First line\
second line\
third line
```

To consume these lines as a single event, use the following Vector configuration:

```toml
[sources.my_file_source]
  type = "file"
  # ...

  [sources.my_file_source.multiline]
    start_pattern = "\\$"
    mode = "continue_past"
    condition_pattern = "\\$"
    timeout_ms = 1000
```

* `start_pattern`, set to `\\$`, tells Vector that new multi-line events
  start with lines that end in `\`.
* `mode`, set to `continue_past`, tells Vector continue aggregating lines, plus
  one additional line, until `condition_pattern` is false.
* `condition_pattern`, set to `\\$`, tells Vector to continue aggregating lines
  if they _end_ with a `\` character.

#### Example 3: Timestamps

Activity logs from services such as Elasticsearch typically begin with a
timestamp, followed by information on the specific activity, as in this example:

```text
[2015-08-24 11:49:14,389][ INFO ][env                      ] [Letha] using [1] data paths, mounts [[/
(/dev/disk1)]], net usable_space [34.5gb], net total_space [118.9gb], types [hfs]
```

To consume these lines as a single event, use the following Vector configuration:

```toml
[sources.my_file_source]
  type = "file"
  # ...

  [sources.my_file_source.multiline]
    start_pattern = "^\[[0-9]{4}-[0-9]{2}-[0-9]{2}"
    mode = "halt_before"
    condition_pattern = "^\[[0-9]{4}-[0-9]{2}-[0-9]{2}"
    timeout_ms = 1000
```

* `start_pattern`, set to `^\[[0-9]{4}-[0-9]{2}-[0-9]{2}`, tells Vector that
  new multi-line events start with a timestamp sequence.
* `mode`, set to `halt_before`, tells Vector to continue aggregating lines as
  long as the `condition_pattern` does not match.
* `condition_pattern`, set to `^\[[0-9]{4}-[0-9]{2}-[0-9]{2}`, tells Vector to
  continue aggregating up until a line starts with a timestamp sequence.

### Read Position

By default, Vector will read new data only for newly discovered files, similar
to the `tail` command. You can read from the beginning of the file by setting
the `start_at_beginning` option to `true`.

Previously discovered files will be [checkpointed](#checkpointing), and the
read position will resume from the last checkpoint.

### File Read Order

By default, Vector attempts to allocate its read bandwidth fairly across all of
the files it's currently watching. This prevents a single very busy file from
starving other independent files from being read. In certain situations,
however, this can lead to interleaved reads from files that should be read one
after the other.

For example, consider a service that logs to timestamped file, creating
a new one at an interval and leaving the old one as-is. Under normal operation,
Vector would follow writes as they happen to each file and there would be no
interleaving. In an overload situation, however, Vector may pick up and begin
tailing newer files before catching up to the latest writes from older files.
This would cause writes from a single logical log stream to be interleaved in
time and potentially slow down ingestion as a whole, since the fixed total read
bandwidth is allocated across an increasing number of files.

To address this type of situation, Vector provides the `oldest_first` flag. When
set, Vector will not read from any file younger than the oldest file that it
hasn't yet caught up to. In other words, Vector will continue reading from older
files as long as there is more data to read. Only once it hits the end will it
then move on to read from younger files.

Whether or not to use the `oldest_first` flag depends on the organization of the
logs you're configuring Vector to tail. If your `include` glob contains multiple
independent logical log streams (e.g. nginx's `access.log` and `error.log`, or
logs from multiple services), you are likely better off with the default
behavior. If you're dealing with a single logical log stream or if you value
per-stream ordering over fairness across streams, consider setting
`oldest_first` to `true`.
