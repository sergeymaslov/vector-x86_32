<%- component = metadata.transforms.add_fields -%>

<%= component_header(component) %>

<%- if component.requirements.any? -%>
## Requirements

<%= component_requirements(component) %>

<%- end -%>
<%- if component.warnings.any? -%>
## Warnings

<%= component_warnings(component) %>

<%- end -%>
## Configuration

<%= component_config_example(component) %>

<%= fields(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= fields(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%= component_fields(component, heading_depth: 2) -%>
<%- if component.examples.any? -%>
## Examples

<%= component_examples(component) %>

<%- end -%>
<%- if component.examples.any? -%>
## Examples

<%= component_examples(component) %>

<%- end -%>
## How It Works [[sort]]

<%= component_sections(component) %>

### Conflicts

#### Key Conflicts

Keys specified in this transform will replace existing keys.

#### Nested Key Conflicts

Nested keys are added in a _deep_ fashion. They will not replace any ancestor
objects. For example, given the following `log` event:

```javascript
{
  "parent": {
    "child1": "value1"
  }
}
```

And the following configuration:

```toml
[transforms.add_nested_field]
  type = "add_fields"
  fields.parent.child2 = "value2"
```

Will result in the following log event:

```javascript
{
  "parent": {
    "child1": "value1",
    "child2": "value2"
  }
}
```

Notice that `parent.child1` field was preserved.

### Types

All supported [configuration value types][docs.configuration#types] are
accepted. This includes primitivate types (`string`, `int`, `float`, `boolean`)
and special types, such as [arrays](#arrays) and
[nested fields](#nested-fields).


