<%- component = metadata.transforms.lua -%>

<%= component_header(component) %>

<%- if component.requirements.any? -%>
## Requirements

<%= component_requirements(component) %>

<%- end -%>
<%- if component.warnings.any? -%>
## Warnings

<%= component_warnings(component) %>

<%- end -%>
## Configuration

<%= component_config_example(component, advanced: false) %>

<%= fields(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= fields(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%- if component.examples.any? -%>
## Examples

<%= component_examples(component) %>

<%- end -%>
## How It Works [[sort]]

<%= component_sections(component) %>

### Add Fields & Tags

To add `log` fields and `metric` tags just set the desired key to the
appropriate value:

```lua
-- Add root level field
event.log.field = "new value"

-- Add nested field
event.log.nested.field = "nested value"

-- Add tag
event.metric.tags.tag = "new value"
```

### Drop Events

To drop events, simply do not call the emitting function with it. For example:

```lua
function (event, emit)
  if not event["message"].match(str, "debug") then
    emit(event)
  end
end
```

### Remove Fields & Tags

You can remove `log` fields and `metric` tags by setting them to `nil`:

```lua
-- remove a log field
event.log.field = nil

-- remove a metric tag
event.metric.tags.tag = nil
```

### Representation of Events

Events are represented as [tables][urls.lua_table] in Lua. Vector uses
[externally tagged representation][urls.externally_tagged_representation] to
encode both log and metric events in a consistent fashion:

* [Log events][docs.about.data-model.log] are represented as values of a key
  named `log`.
* [Metric events][docs.about.data-model.metric] are represented as values of a
  key named `metric`.

<Tabs
  block={true}
  defaultValue="log"
  urlKey="event_type"
  values={[
    { label: 'Log', value: 'log', },
    { label: 'Metric', value: 'metric', },
  ]
}>
<TabItem value="log">

For instance, a typical [`log`][docs.data-model.log] event produced by the
[`stdin`][docs.sources.stdin] source could have been created programmatically
using the following code:

```lua
event = {
  log = {
    host = "localhost",
    message = "the message",
    timestamp = os.date("!*t")
  }
}
```

</TabItem>
<TabItem value="metric">

For instance, a typical [`metric`][docs.data-model.metric] event could have
been created programmatically in a similar way:

<Tabs
  defaultValue="counter"
  select={true}
  urlKey="metric_kind"
  values={[
    { label: 'Counter', value: 'counter', },
    { label: 'Gauge', value: 'gauge', },
    { label: 'Set', value: 'set', },
    { label: 'Distribution', value: 'distribution', },
    { label: 'Aggregated Histogram', value: 'aggregated_histogram', },
    { label: 'Aggregated Summary', value: 'aggregated_summary', },
  ]
}>
<TabItem value="counter">

```lua
event = {
  metric = {
    name = "login.count",
    timestamp = os.date("!*t"),
    kind = "absolute",
    tags = {
      host = "my.host.example"
    },
    counter = {
      value = 24.2
    }
  }
}
```

</TabItem>
<TabItem value="gauge">

```lua
event = {
  metric = {
    name = "memory_rss",
    timestamp = os.date("!*t"),
    kind = "absolute",
    tags = {
      host = "my.host.example"
    },
    gauge = {
      value = 512.0
    }
  }
}
```

</TabItem>
<TabItem value="set">

```lua
event = {
  metric = {
    name = "user_names",
    timestamp = os.date("!*t"),
    kind = "absolute",
    tags = {
      host = "my.host.example"
    },
    set = {
      values = {"value1", "value2"}
    }
  }
}
```

</TabItem>
<TabItem value="distribution">

```lua
event = {
  metric = {
    name = "response_time_ms",
    timestamp = os.date("!*t"),
    kind = "absolute",
    tags = {
      host = "my.host.example"
    },
    distribution = {
      values = {2.21, 5.46, 10.22},
      sample_rates = {5, 2, 5}
    }
  }
}
```

</TabItem>
<TabItem value="aggregated_histogram">

```lua
event = {
  metric = {
    name = "response_time_ms",
    timestamp = os.date("!*t"),
    kind = "absolute",
    tags = {
      host = "my.host.example"
    },
    aggregated_histogram = {
      buckets = {1.0, 2.0, 4.0, 8.0, 16.0, 32.0},
      counts = {20, 10, 45, 12, 18, 92},
      count = 197,
      sum = 975.2
    }
  }
}
```

</TabItem>
<TabItem value="aggregated_summary">

```lua
event = {
  metric = {
    name = "response_time_ms",
    timestamp = os.date("!*t"),
    kind = "absolute",
    tags = {
      host = "my.host.example"
    },
    aggregated_sumary = {
      quantiles = {0.1, 0.25, 0.5, 0.9, 0.99, 1.0},
      values = {2.0, 3.0, 5.0, 8.0, 9.0, 10.0},
      count = 197,
      sum = 975.2
    }
  }
}
```

</TabItem>
</Tabs>
</TabItem>
</Tabs>

#### Data Types

The correspondence between Vector's [data types][docs.about.data-model.log#types] and Lua data type is summarized
by the following table:

| Vector Type | Lua Type | Comment |
| :----------- | :-------- | :------- |
| [`String`][docs.about.data-model.log#strings] | [`string`][urls.lua_string] ||
| [`Integer`][docs.about.data-model.log#ints] | [`integer`][urls.lua_integer] ||
| [`Float`][docs.about.data-model.log#floats] | [`number`][urls.lua_number] ||
| [`Boolean`][docs.about.data-model.log#booleans] | [`boolean`][urls.lua_boolean] ||
| [`Timestamp`][docs.about.data-model.log#timestamps] | [`table`][urls.lua_table] | There is no dedicated timestamp type in Lua. Timestamps are represented as tables using the convention defined by [`os.date`][urls.lua_os_date] and [`os.time`][urls.lua_os_time]. The table representation of a timestamp contains the fields `year`, `month`, `day`, `hour`, `min`, `sec`, `nanosec`, `yday`, `wday`, and `isdst`. If such a table is passed from Lua to Vector, the fields  `yday`, `wday`, and `isdst` can be omitted. In addition to the `os.time` representation, Vector supports sub-second resolution with a `nanosec` field in the table. |
| [`Null`][docs.about.data-model.log#null-values] | empty string | In Lua setting the value of a table field to `nil` means deletion of this field. In addition, the length operator `#` does not work in the expected way with sequences containing nulls. Because of that `Null` values are encoded as empty strings. |
| [`Map`][docs.about.data-model.log#maps]| [`table`][urls.lua_table] | |
| [`Array`][docs.about.data-model.log#arrays] | [`sequence`][urls.lua_sequence] | Sequences are a special case of tables. Indexes start from 1, following the Lua convention. |

### Iterate Over Fields & Tags

To iterate over all fields of an `event` use the [`pairs`][urls.lua_pairs]
method.  For example:

```lua
function (event, emit)
  -- Remove all fields where the value is "-"
  for f, v in pairs(event) do
    if v == "-" then
      event[f] = nil
    end
  end

  emit(event)
end
```

### Defining Timestamps

To parse a timestamp with an optional milliseconds field, like `2020-04-07 06:26:02.643` or `2020-04-07 06:26:02`:

```lua
timestamp_pattern = "(%d%d%d%d)[-](%d%d)[-](%d%d) (%d%d):(%d%d):(%d%d).?(%d*)"

function parse_timestamp(str)
  local year, month, day, hour, min, sec, millis = string.match(str, timestamp_pattern)
  local ms = 0
  if millis and millis ~= "" then
    ms = tonumber(millis)
  end
  return {
    year    = tonumber(year),
    month   = tonumber(month),
    day     = tonumber(day),
    hour    = tonumber(hour),
    min     = tonumber(min),
    sec     = tonumber(sec),
    nanosec = ms * 1000000
  }
end

parse_timestamp('2020-04-07 06:26:02.643')
parse_timestamp('2020-04-07 06:26:02')
```

### Search Directories

Vector provides a `search_dirs` option that allows you to specify absolute
paths that will be searched when using the [Lua `require`
function][urls.lua_require]. If this option is not set, the directories of
the [configuration files][docs.setup.configuration] will be used instead.

### Lua Version

Vector uses the [`rlua` Rust crate][urls.rlua] which currently embeds Lua 5.3.

### Learning Lua

In order to write non-trivial transforms in Lua, one has to have basic
understanding of Lua. Because Lua is an easy to learn language, reading a few
first chapters of [the official book][urls.lua_pil] or consulting
[the manual][urls.lua_manual] would suffice.
