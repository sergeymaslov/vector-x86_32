<%- component = metadata.transforms.regex_parser -%>

<%= component_header(component) %>

<%- if component.requirements.any? -%>
## Requirements

<%= component_requirements(component) %>

<%- end -%>
<%- if component.warnings.any? -%>
## Warnings

<%= component_warnings(component) %>

<%- end -%>
## Configuration

<%= component_config_example(component) %>

<%= fields(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= fields(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%- if component.examples.any? -%>
## Examples

<%= component_examples(component) %>

<%- end -%>
## How It Works [[sort]]

<%= component_sections(component) %>

### Failed Parsing

If the `field` value fails to parse against the provided `regex` then an error
will be [logged][docs.monitoring#logs] and the event will be kept or discarded
depending on the `drop_failed` value.

A failure includes any event that does not successfully parse against the
provided `regex`. This includes bad values as well as events missing the
specified `field`.

### Performance

The `regex_parser` source has been involved in the following performance tests:

* [`regex_parsing_performance`][urls.regex_parsing_performance_test]

Learn more in the [Performance][pages.index#performance] sections.

### Regex Debugger

To test the validity of the[`regex`](#regex) option, we recommend the [Rust
Regex Tester][urls.regex_tester]. Note, you _must_ use
[named captures](#named-captures) in your regex to map the results to fields.

### Regex Syntax

Vector follows the [documented Rust Regex syntax][urls.rust_regex_syntax] since
Vector is written in Rust. This syntax follows a Perl-style regular expression
syntax, but lacks a few features like look around and backreferences.

#### Named Captures

You can name Regex captures with the `<name>` syntax. For example:

```text
^(?P<timestamp>\w*) (?P<level>\w*) (?P<message>.*)$
```

Will capture `timestamp`, `level`, and `message`. All values are extracted as
`string` values and must be coerced with the `types` table.

More info can be found in the [Regex grouping and flags
documentation][urls.regex_grouping_and_flags].

#### Flags

Regex flags can be toggled with the `(?flags)` syntax. The available flags are:

| Flag | Descriuption |
| :--- | :----------- |
| `i`  | case-insensitive: letters match both upper and lower case |
| `m`  | multi-line mode: ^ and $ match begin/end of line |
| `s`  | allow . to match `\n` |
| `U`  | swap the meaning of `x*` and `x*?` |
| `u`  | Unicode support (enabled by default) |
| `x`  | ignore whitespace and allow line comments (starting with `#`)

For example, to enable the case-insensitive flag you can write:

```text
(?i)Hello world
```

More info can be found in the [Regex grouping and flags
documentation][urls.regex_grouping_and_flags].





