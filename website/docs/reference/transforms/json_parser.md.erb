<%- component = metadata.transforms.json_parser -%>

<%= component_header(component) %>

<%- if component.requirements.any? -%>
## Requirements

<%= component_requirements(component) %>

<%- end -%>
<%- if component.warnings.any? -%>
## Warnings

<%= component_warnings(component) %>

<%- end -%>
## Configuration

<%= component_config_example(component) %>

<%= fields(component.specific_options_list, heading_depth: 3) %>

<%- if component.env_vars_list.any? -%>
## Env Vars

<%= fields(component.env_vars_list, heading_depth: 3) %>

<%- end -%>
<%= component_fields(component, heading_depth: 2) -%>
<%- if component.examples.any? -%>
## Examples

<%= component_examples(component) %>

<%- end -%>
## How It Works [[sort]]

<%= component_sections(component) %>

### Chaining / Unwrapping

Please see the [Examples section](#examples).

### Invalid JSON

If the value for the specified `field` is not valid JSON you can control keep
or discard the event with the `drop_invalid` option. Setting it to `true` will
discard the event and drop it entirely. Setting it to `false` will keep the
event and pass it through. Note that passing through the event could cause
problems and violate assumptions about the structure of your event.

### Merge Conflicts

#### Key conflicts

Any key present in the decoded JSON will override existin keys in the event.

#### Object conflicts

If the decoded JSON includes nested fields it will be _deep_ merged into the
event. For example, given the following event:

```javascript
{
  "message": "{\"parent\": {\"child2\": \"value2\"}}",
  "parent": {
    "child1": "value1"
  }
}
```

Parsing the `"message"` field would result the following structure:

```javascript
{
  "parent": {
    "child1": "value1",
    "child2": "value2"
  }
}
```

Notice that the `parent.child1` key was preserved.
