---
title: Deployment Strategies
description: The various strategies used to deploy Vector across your infrastructure.
sidebar_label: Strategies
---

Vector is designed to be the single and only tool needed to get data from A to
B. This means Vector can be deployed as a [daemon](#daemon),
[sidecar](#sidecar), or a [service](#service). You combine these strategies to
form [topologies][docs.topologies] which are covered in the
[next section][docs.topologies]. In this section we'll cover each strategy in
detail and help you understand when to use each.

## Daemon

<%- strategy = metadata.installation.strategies.daemon %>
<%= deployment_strategy(strategy) %>

### When to use

* You are responsible for the host machine and have the ability to install
  Vector directly on the host.
* You are operationally profecient and understand how to reliably install,
  manage, and configure software.
* You want a single robust solution for collecting and shipping your
  observability data on each host.

### When NOT to use

* You do not control the host machine or environment.
* You do not feel comfortable installing, managing, and configurig host-level
  software.
* You want to shift reponsibility of collecting and shipping observability data
  to each service owner.

## Sidecar

<%- strategy = metadata.installation.strategies.sidecar %>
<%= deployment_strategy(strategy) %>

### When to use

* You are not responsible for the host machine and do not have the ability to
  install Vector directly on the host.
* You want to couple data collection with each service, shifting responsibility
  to the service owner.
* You find it simpler for each service to have it own specific Vector
  instance and configuration file.

### When NOT to use

* You do not like the idea of having multiple Vector instances on a
  single host.

## Service

<%- strategy = metadata.installation.strategies.service %>
<%= deployment_strategy(strategy) %>

### When to use

* You need to batch data to optimize throughput and reduce the downstream
  request rate.
* You want to perform operations across multiple hosts, such as aggregating
  data in a global context.
* Vector is a stream consumer, continually pulling data from services like
  Kafka, Kinesis, or SQS.
* You are receving data from other upstream Vector instances via the
  [`vector` sink][docs.sinks.vector].

### When NOT to use

* Your downstream services support streaming where each individual host can
  write data directly to the services.
* You do not need to perform operations across multiple hosts.
