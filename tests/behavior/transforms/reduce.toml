[transforms.reduce]
  inputs = []
  type = "reduce"
  identifier_fields = [ "request_id" ]
  [transforms.reduce.ends_when]
    "test_end_message.exists" = true

[[tests]]
  name = "reduce_basic"

  [[tests.inputs]]
    insert_at = "reduce"
    type = "log"
    [tests.inputs.log_fields]
      message = "first message value"
      request_id = "1"
      host = "host1"
      counter = 5

  [[tests.inputs]]
    insert_at = "reduce"
    type = "log"
    [tests.inputs.log_fields]
      message = "second message value"
      request_id = "1"
      host = "host2"
      counter = 7

  [[tests.inputs]]
    insert_at = "reduce"
    type = "log"
    [tests.inputs.log_fields]
      message = "other reduce one"
      request_id = "2"
      host = "host3"
      counter = 11

  [[tests.inputs]]
    insert_at = "reduce"
    type = "log"
    [tests.inputs.log_fields]
      message = "third message value"
      request_id = "1"
      host = "host4"
      counter = 9
      test_end_message = true

  [[tests.inputs]]
    insert_at = "reduce"
    type = "log"
    [tests.inputs.log_fields]
      message = "other reduce two"
      request_id = "2"
      host = "host5"
      counter = 7

  [[tests.inputs]]
    insert_at = "reduce"
    type = "log"
    [tests.inputs.log_fields]
      message = "other reduce three"
      request_id = "2"
      host = "host6"
      counter = 2
      test_end_message = true

  [[tests.outputs]]
    extract_from = "reduce"
    [[tests.outputs.conditions]]
      "message.equals" = "first message value"
      "host.equals" = "host1"
      "request_id.equals" = "1"
      "counter.equals" = 21
      "timestamp_end.exists" = true
    [[tests.outputs.conditions]]
      "message.equals" = "other reduce one"
      "host.equals" = "host3"
      "request_id.equals" = "2"
      "counter.equals" = 20
      "timestamp_end.exists" = true

##------------------------------------------------------------------------------

[transforms.reduce_strats]
  inputs = []
  type = "reduce"
  identifier_fields = [ "request_id" ]

  [transforms.reduce_strats.merge_strategies]
    "message" = "concat"
    "other_value" = "array"

  [transforms.reduce_strats.ends_when]
    "test_end_message.exists" = true

[[tests]]
  name = "reduce_merge_strategies"

  [[tests.inputs]]
    insert_at = "reduce_strats"
    type = "log"
    [tests.inputs.log_fields]
      message = "first message value"
      request_id = "1"
      other_value = "first"
      host = "host1"
      counter = 5

  [[tests.inputs]]
    insert_at = "reduce_strats"
    type = "log"
    [tests.inputs.log_fields]
      message = "second message value"
      other_value = 2
      request_id = "1"
      host = "host2"
      counter = 7

  [[tests.inputs]]
    insert_at = "reduce_strats"
    type = "log"
    [tests.inputs.log_fields]
      message = "other reduce one"
      request_id = "2"
      host = "host3"
      counter = 11

  [[tests.inputs]]
    insert_at = "reduce_strats"
    type = "log"
    [tests.inputs.log_fields]
      message = "third message value"
      request_id = "1"
      host = "host4"
      counter = 9
      test_end_message = true

  [[tests.inputs]]
    insert_at = "reduce_strats"
    type = "log"
    [tests.inputs.log_fields]
      message = "other reduce two"
      other_value = "1"
      request_id = "2"
      host = "host5"
      counter = 7

  [[tests.inputs]]
    insert_at = "reduce_strats"
    type = "log"
    [tests.inputs.log_fields]
      message = "other reduce three"
      request_id = "2"
      other_value = true
      host = "host6"
      counter = 2
      test_end_message = true

  [[tests.outputs]]
    extract_from = "reduce_strats"
    [[tests.outputs.conditions]]
      "message.equals" = "first message value second message value third message value"
      "host.equals" = "host1"
      "request_id.equals" = "1"
      "counter.equals" = 21
      "timestamp_end.exists" = true
    [[tests.outputs.conditions]]
      "message.equals" = "other reduce one other reduce two other reduce three"
      "host.equals" = "host3"
      "request_id.equals" = "2"
      "counter.equals" = 20
      "timestamp_end.exists" = true

##------------------------------------------------------------------------------

[transforms.reduce_numbers]
  inputs = []
  type = "reduce"

  [transforms.reduce_numbers.merge_strategies]
    "mins" = "min"
    "maxs" = "max"

  [transforms.reduce_numbers.ends_when]
    "test_end_message.exists" = true

[[tests]]
  name = "reduce_number_strategies_1"

  [[tests.inputs]]
    insert_at = "reduce_numbers"
    type = "log"
    [tests.inputs.log_fields]
      mins = 5.1
      maxs = 3.3

  [[tests.inputs]]
    insert_at = "reduce_numbers"
    type = "log"
    [tests.inputs.log_fields]
      mins = 9
      maxs = 7.2

  [[tests.inputs]]
    insert_at = "reduce_numbers"
    type = "log"
    [tests.inputs.log_fields]
      mins = 5.2
      maxs = 6
      test_end_message = "exists"

  [[tests.outputs]]
    extract_from = "reduce_numbers"
    [[tests.outputs.conditions]]
      "mins.equals" = 5.1
      "maxs.equals" = 7.2
      "timestamp_end.exists" = true

[[tests]]
  name = "reduce_number_strategies_2"

  [[tests.inputs]]
    insert_at = "reduce_numbers"
    type = "log"
    [tests.inputs.log_fields]
      mins = 5
      maxs = 3

  [[tests.inputs]]
    insert_at = "reduce_numbers"
    type = "log"
    [tests.inputs.log_fields]
      mins = 9.1
      maxs = 7

  [[tests.inputs]]
    insert_at = "reduce_numbers"
    type = "log"
    [tests.inputs.log_fields]
      mins = 5
      maxs = 6.2
      test_end_message = "exists"

  [[tests.outputs]]
    extract_from = "reduce_numbers"
    [[tests.outputs.conditions]]
      "mins.equals" = 5
      "maxs.equals" = 7
      "timestamp_end.exists" = true
