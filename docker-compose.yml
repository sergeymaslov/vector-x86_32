version: "3"
services:
  #
  # Jobs
  #

  build-x86_64-unknown-linux-musl:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/builder-x86_64-unknown-linux-musl/Dockerfile
    environment:
      NATIVE_BUILD: "false"
      TARGET: x86_64-unknown-linux-musl
      FEATURES: default-musl
      CARGO_TERM_COLOR: always
    volumes:
      - $PWD:$PWD
      - ./target/x86_64-unknown-linux-musl/cargo/registry:/opt/rust/cargo/registry
      - ./target/x86_64-unknown-linux-musl/cargo/git:/opt/rust/cargo/git
      - ./target/x86_64-unknown-linux-musl/rustup/tmp:/opt/rust/rustup/tmp
    working_dir: $PWD
    user: $USER
    command: scripts/build.sh

  build-x86_64-unknown-linux-gnu:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/builder-x86_64-unknown-linux-gnu/Dockerfile
      args:
        USER: $USER
    environment:
      NATIVE_BUILD: "false"
      TARGET: x86_64-unknown-linux-gnu
      FEATURES: default
      CARGO_TERM_COLOR: always
    volumes:
      - $PWD:$PWD
      - ./target/x86_64-unknown-linux-gnu/cargo/registry:/usr/local/cargo/registry
      - ./target/x86_64-unknown-linux-gnu/cargo/git:/usr/local/cargo/git
      - ./target/x86_64-unknown-linux-gnu/rustup/tmp:/usr/local/rustup/tmp
    working_dir: $PWD
    user: $USER
    command: scripts/build.sh

  build-armv7-unknown-linux-musleabihf:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/builder-armv7-unknown-linux-musleabihf/Dockerfile
    environment:
      NATIVE_BUILD: "false"
      TARGET: armv7-unknown-linux-musleabihf
      FEATURES: default-musl
      CARGO_TERM_COLOR: always
    volumes:
      - $PWD:$PWD
      - ./target/armv7-unknown-linux-musleabihf/cargo/registry:/opt/rust/cargo/registry
      - ./target/armv7-unknown-linux-musleabihf/cargo/git:/opt/rust/cargo/git
      - ./target/armv7-unknown-linux-musleabihf/rustup/tmp:/opt/rust/rustup/tmp
    working_dir: $PWD
    user: $USER
    command: scripts/build.sh

  build-aarch64-unknown-linux-musl:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/builder-aarch64-unknown-linux-musl/Dockerfile
    environment:
      NATIVE_BUILD: "false"
      TARGET: aarch64-unknown-linux-musl
      FEATURES: default-musl
      CARGO_TERM_COLOR: always
    volumes:
      - $PWD:$PWD
      - ./target/aarch64-unknown-linux-musl/cargo/registry:/opt/rust/cargo/registry
      - ./target/aarch64-unknown-linux-musl/cargo/git:/opt/rust/cargo/git
      - ./target/aarch64-unknown-linux-musl/rustup/tmp:/opt/rust/rustup/tmp
    working_dir: $PWD
    user: $USER
    command: scripts/build.sh

  package-archive-x86_64-unknown-linux-musl:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/builder-x86_64-unknown-linux-musl/Dockerfile
    environment:
      NATIVE_BUILD: "false"
      TARGET: x86_64-unknown-linux-musl
      FEATURES: default-musl
      CARGO_TERM_COLOR: always
    volumes:
      - $PWD:$PWD
      - ./target/x86_64-unknown-linux-musl/cargo/registry:/opt/rust/cargo/registry
      - ./target/x86_64-unknown-linux-musl/cargo/git:/opt/rust/cargo/git
      - ./target/x86_64-unknown-linux-musl/rustup/tmp:/opt/rust/rustup/tmp
    working_dir: $PWD
    user: $USER
    command: ./scripts/package-archive.sh

  package-archive-x86_64-unknown-linux-gnu:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/builder-x86_64-unknown-linux-gnu/Dockerfile
      args:
        USER: $USER
    environment:
      NATIVE_BUILD: "false"
      TARGET: x86_64-unknown-linux-gnu
      FEATURES: ""
      CARGO_TERM_COLOR: always
    volumes:
      - $PWD:$PWD
      - ./target/x86_64-unknown-linux-gnu/cargo/registry:/usr/local/cargo/registry
      - ./target/x86_64-unknown-linux-gnu/cargo/git:/usr/local/cargo/git
      - ./target/x86_64-unknown-linux-gnu/rustup/tmp:/usr/local/rustup/tmp
    working_dir: $PWD
    user: $USER
    command: ./scripts/package-archive.sh

  package-archive-armv7-unknown-linux-musleabihf:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/builder-armv7-unknown-linux-musleabihf/Dockerfile
    environment:
      NATIVE_BUILD: "false"
      TARGET: armv7-unknown-linux-musleabihf
      FEATURES: default-musl
      CARGO_TERM_COLOR: always
    volumes:
      - $PWD:$PWD
      - ./target/armv7-unknown-linux-musleabihf/cargo/registry:/opt/rust/cargo/registry
      - ./target/armv7-unknwon-linux-musleabihf/cargo/git:/opt/rust/cargo/git
      - ./target/armv7-unknwon-linux-musleabihf/rustup/tmp:/opt/rust/rustup/tmp
    working_dir: $PWD
    user: $USER
    command: ./scripts/package-archive.sh

  package-archive-aarch64-unknown-linux-musl:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/builder-aarch64-unknown-linux-musl/Dockerfile
    environment:
      NATIVE_BUILD: "false"
      TARGET: aarch64-unknown-linux-musl
      FEATURES: default-musl
      CARGO_TERM_COLOR: always
    volumes:
      - $PWD:$PWD
      - ./target/aarch64-unknown-linux-musl/cargo/registry:/opt/rust/cargo/registry
      - ./target/aarch64-unknown-linux-musl/cargo/git:/opt/rust/cargo/git
      - ./target/aarch64-unknown-linux-musl/rustup/tmp:/opt/rust/rustup/tmp
    working_dir: $PWD
    user: $USER
    command: ./scripts/package-archive.sh

  package-deb-x86_64:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/builder-x86_64-unknown-linux-gnu/Dockerfile
      args:
        USER: $USER
    environment:
      TARGET: x86_64-unknown-linux-gnu
    volumes:
      - $PWD:$PWD
      - ./target/x86_64-unknown-linux-gnu/cargo/registry:/usr/local/cargo/registry
      - ./target/x86_64-unknown-linux-gnu/cargo/git:/usr/local/cargo/git
      - ./target/x86_64-unknown-linux-gnu/rustup/tmp:/usr/local/rustup/tmp
    working_dir: $PWD
    user: $USER
    command: ./scripts/package-deb.sh

  package-deb-armv7:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/builder-armv7-unknown-linux-musleabihf/Dockerfile
    environment:
      TARGET: armv7-unknown-linux-musleabihf
    volumes:
      - $PWD:$PWD
      - ./target/armv7-unknown-linux-musleabihf/cargo/registry:/opt/rust/cargo/registry
      - ./target/armv7-unknown-linux-musleabihf/cargo/git:/opt/rust/cargo/git
      - ./target/armv7-unknown-linux-musleabihf/rustup/tmp:/opt/rust/rustup/tmp
    working_dir: $PWD
    user: $USER
    command: ./scripts/package-deb.sh

  package-deb-aarch64:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/builder-aarch64-unknown-linux-musl/Dockerfile
    environment:
      TARGET: aarch64-unknown-linux-musl
    volumes:
      - $PWD:$PWD
      - ./target/aarch64-unknown-linux-musl/cargo/registry:/opt/rust/cargo/registry
      - ./target/aarch64-unknown-linux-musl/cargo/git:/opt/rust/cargo/git
      - ./target/aarch64-unknown-linux-musl/rustup/tmp:/opt/rust/rustup/tmp
    working_dir: $PWD
    user: $USER
    command: ./scripts/package-deb.sh

  package-rpm-x86_64:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/packager-rpm/Dockerfile
    environment:
      TARGET: x86_64-unknown-linux-gnu
    volumes:
      - $PWD:$PWD
    working_dir: $PWD
    user: $USER
    command: ./scripts/package-rpm.sh

  package-rpm-armv7:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/packager-rpm/Dockerfile
    environment:
      TARGET: armv7-unknown-linux-musleabihf
      ARCH: armv7hl
    volumes:
      - $PWD:$PWD
    working_dir: $PWD
    user: $USER
    command: ./scripts/package-rpm.sh

  package-rpm-aarch64:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/packager-rpm/Dockerfile
    environment:
      TARGET: aarch64-unknown-linux-musl
    volumes:
      - $PWD:$PWD
    working_dir: $PWD
    user: $USER
    command: ./scripts/package-rpm.sh

  verify-rpm-amazonlinux-1:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/verifier-amazonlinux-1/Dockerfile
    volumes:
      - $PWD:$PWD
    working_dir: $PWD
    command:
      ["sh", "-ec", "rpm -i target/artifacts/*-x86_64.rpm && vector --version"]

  verify-rpm-amazonlinux-2:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/verifier-amazonlinux-2/Dockerfile
    volumes:
      - $PWD:$PWD
    working_dir: $PWD
    command:
      ["sh", "-ec", "rpm -i target/artifacts/*-x86_64.rpm && vector --version"]

  verify-rpm-centos-7:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/verifier-centos-7/Dockerfile
    volumes:
      - $PWD:$PWD
    working_dir: $PWD
    command:
      ["sh", "-ec", "rpm -i target/artifacts/*-x86_64.rpm && vector --version"]

  verify-deb-artifact-on-deb-8:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/verifier-deb-8/Dockerfile
    volumes:
      - $PWD:$PWD
    working_dir: $PWD
    command:
      ["sh", "-ec", "dpkg -i target/artifacts/*-amd64.deb && vector --version"]

  verify-deb-artifact-on-deb-9:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/verifier-deb-9/Dockerfile
    volumes:
      - $PWD:$PWD
    working_dir: $PWD
    command:
      ["sh", "-ec", "dpkg -i target/artifacts/*-amd64.deb && vector --version"]

  verify-deb-artifact-on-deb-10:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/verifier-deb-10/Dockerfile
    volumes:
      - $PWD:$PWD
    working_dir: $PWD
    command:
      ["sh", "-ec", "dpkg -i target/artifacts/*-amd64.deb && vector --version"]

  verify-deb-artifact-on-ubuntu-16-04:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/verifier-ubuntu-16-04/Dockerfile
    volumes:
      - $PWD:$PWD
    working_dir: $PWD
    command:
      ["sh", "-ec", "dpkg -i target/artifacts/*-amd64.deb && vector --version"]

  verify-deb-artifact-on-ubuntu-18-04:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/verifier-ubuntu-18-04/Dockerfile
    volumes:
      - $PWD:$PWD
    working_dir: $PWD
    command:
      ["sh", "-ec", "dpkg -i target/artifacts/*-amd64.deb && vector --version"]

  verify-deb-artifact-on-ubuntu-19-04:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/verifier-ubuntu-19-04/Dockerfile
    volumes:
      - $PWD:$PWD
    working_dir: $PWD
    command:
      ["sh", "-ec", "dpkg -i target/artifacts/*-amd64.deb && vector --version"]

  verify-nixos:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/verifier-nixos/Dockerfile
    volumes:
      - $PWD:$PWD
    working_dir: $PWD
    command: ["sh", "-ec", "./scripts/verify-nix.sh && vector --version"]

  target-graph:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/target-graph/Dockerfile
    volumes:
      - $PWD:$PWD
    working_dir: $PWD
    user: $USER
    entrypoint: ./scripts/target-graph.sh

  load-qemu-binfmt:
    build:
      context: .
      dockerfile: scripts/ci-docker-images/loader-qemu-binfmt/Dockerfile
    privileged: true
    command: dpkg-reconfigure qemu-user-binfmt

  #
  # Dependencies
  #

  dependencies-all:
    image: ubuntu:18.04
    command: sleep infinity
    depends_on:
      - dependencies-aws
      - dependencies-clickhouse
      - dependencies-elasticsearch
      - dependencies-gcp
      - dependencies-influxdb
      - dependencies-kafka
      - dependencies-loki
      - dependencies-pulsar
      - dependencies-splunk

  dependencies-aws:
    image: ubuntu:18.04
    command: sleep infinity
    depends_on:
      - ec2_metadata
      - localstack
      - mockwatchlogs

  dependencies-clickhouse:
    image: ubuntu:18.04
    command: sleep infinity
    depends_on:
      - clickhouse

  dependencies-elasticsearch:
    image: ubuntu:18.04
    command: sleep infinity
    depends_on:
      - elasticsearch
      - elasticsearch-tls
      - localstack

  dependencies-gcp:
    image: ubuntu:18.04
    command: sleep infinity
    depends_on:
      - gcloud-pubsub

  dependencies-influxdb:
    image: ubuntu:18.04
    command: sleep infinity
    depends_on:
      - influxdb_v1
      - influxdb_v2

  dependencies-kafka:
    image: ubuntu:18.04
    command: sleep infinity
    depends_on:
      - kafka
      - zookeeper

  dependencies-loki:
    image: ubuntu:18.04
    command: sleep infinity
    depends_on:
      - loki

  dependencies-pulsar:
    image: ubuntu:18.04
    command: sleep infinity
    depends_on:
      - pulsar

  dependencies-splunk:
    image: ubuntu:18.04
    command: sleep infinity
    depends_on:
      - splunk

  #
  # Services
  #

  localstack:
    image: localstack/localstack@sha256:f21f1fc770ee4bfd5012afdc902154c56b7fb18c14cf672de151b65569c8251e
    ports:
      - "4568:4568"
      - "4572:4572"
      - "4582:4582"
      - "4571:4571"
      - "4573:4573"
    environment:
      SERVICES: kinesis:4568,s3:4572,cloudwatch:4582,elasticsearch:4571,firehose:4573
  mockwatchlogs:
    image: luciofranco/mockwatchlogs:latest
    ports:
      - "6000:6000"
    environment:
      RUST_LOG: trace
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9091-9093:9091-9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9091,SSL://:9092,SASL_PLAINTEXT://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9091,SSL://localhost:9092,SASL_PLAINTEXT://localhost:9093
      KAFKA_SSL_KEYSTORE_LOCATION: /certs/localhost.p12
      KAFKA_SSL_KEYSTORE_PASSWORD: NOPASS
      KAFKA_SSL_TRUSTSTORE_LOCATION: /certs/localhost.p12
      KAFKA_SSL_TRUSTSTORE_PASSWORD: NOPASS
      KAFKA_SSL_KEY_PASSWORD: NOPASS
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: none
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
      KAFKA_INTER_BROKER_LISTENER_NAME: SASL_PLAINTEXT
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
    volumes:
      - ./tests/data/localhost.p12:/certs/localhost.p12:ro
      - ./tests/data/kafka_server_jaas.conf:/etc/kafka/kafka_server_jaas.conf
  pulsar:
    image: apachepulsar/pulsar
    command: bin/pulsar standalone
    ports:
      - "6650:6650"
  splunk:
    image: timberio/splunk-hec-test:latest
    ports:
      - "8088:8088"
      - "8000:8000"
      - "8089:8089"
    entrypoint:
      [
        "sh",
        "-c",
        "./bin/splunk add index custom_index && ./bin/splunk set minfreemb 5 && ./entrypoint.sh",
      ]
  elasticsearch:
    image: elasticsearch:6.6.2
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
  elasticsearch-tls:
    image: elasticsearch:6.6.2
    ports:
      - "9201:9200"
      - "9301:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.transport.ssl.enabled=true
      - xpack.ssl.certificate=certs/localhost.crt
      - xpack.ssl.key=certs/localhost.key
    volumes:
      - ./tests/data:/usr/share/elasticsearch/config/certs:ro
  clickhouse:
    image: yandex/clickhouse-server:19
    ports:
      - "8123:8123"
  ec2_metadata:
    image: timberiodev/mock-ec2-metadata:latest
    ports:
      - "8111:8111"
  gcloud-pubsub:
    image: messagebird/gcloud-pubsub-emulator
    ports:
      - 8681-8682:8681-8682
    environment:
      - PUBSUB_PROJECT1=testproject,topic1:subscription1
  loki:
    image: grafana/loki:master
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - ./tests/data:/etc/loki
  influxdb_v1:
    image: influxdb:1.7
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_REPORTING_DISABLED=true
  influxdb_v2:
    image: quay.io/influxdb/influxdb:2.0.0-beta
    ports:
      - "9999:9999"
    command: influxd --reporting-disabled
